        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1://Unit test for isGameOver function
        -:    2://game ends if stack of Province cards is empty or 3 supply pile are at 0
        -:    3:
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include "rngs.h"
        -:    7:#include <stdio.h>
        -:    8:#include <math.h>
        -:    9:#include <stdlib.h>
        -:   10:#include <string.h>
        -:   11:
        -:   12:int fail = 0;
        -:   13:int success = 0;
        -:   14:
        -:   15:void assertTrue(int a, int b) {
        9:   16:	if(a == b){
        9:   17:		printf("TEST SUCCESSFULLY COMPLETED.\n");
        9:   18:		success++;	
        9:   19:	} else {
    #####:   20:		printf("TEST FAILED.\n");
    #####:   21:		fail++;
        -:   22:	}
        9:   23:}
        -:   24:
        -:   25:int main() {
        -:   26:	
        3:   27:	int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        3:   28:	int numPlayer = 2;
        3:   29:	int seed = 1000;
        -:   30:	struct gameState G;
        -:   31:
        3:   32:	printf("TESTING isGameOver():\n");
        -:   33:
        3:   34:	memset(&G, 23, sizeof(struct gameState));
        3:   35:	initializeGame(numPlayer, k, seed, &G);	
        -:   36:
        -:   37:	//setting province gameOver condition
        3:   38:	G.supplyCount[province] = 0;
        -:   39:
        3:   40:	printf("Testing where province cards = 0:\n");
        3:   41:	assertTrue(isGameOver(&G), 1);
        -:   42:
        -:   43:	//resetting province supply count and setting supply pile game over condition
        3:   44:	G.supplyCount[province] = 1;
        -:   45:	
        -:   46:	int i;
       24:   47:	for(i = 0; i < 3; i++){
        9:   48:		G.supplyCount[i] = 0;
        9:   49:	}	
        -:   50:
        3:   51:	printf("Testing for 3 empty supply piles...\n");
        3:   52:	assertTrue(isGameOver(&G), 1);
        -:   53:
        -:   54:	//resetting supply piles
       24:   55:	for(i = 0; i < 3; i++){
        9:   56:		G.supplyCount[i] = 1;
        9:   57:	}
        -:   58:
        3:   59:	printf("Testing for non winning game conditions...\n");
        3:   60:	assertTrue(isGameOver(&G), 0);
        -:   61:
        -:   62:	//displaying test results
        3:   63:	if(fail){
    #####:   64:		printf("%d tests failed, %d passed.\n", fail, success);
    #####:   65:	}else {
        3:   66:		printf("ALL TESTS SUCCESFULLY COMPLETED.\n");
        -:   67:	}
        -:   68:
        3:   69:	return 0;
        -:   70:}
