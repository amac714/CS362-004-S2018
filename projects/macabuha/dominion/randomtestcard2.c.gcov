        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <time.h>
        -:    8:#include <string.h>
        -:    9:
        -:   10:
        -:   11://globals
        -:   12:int villageCallFails = 0;
        -:   13:int discardFails = 0;
        -:   14:int actionFails = 0;
        -:   15:int drawCardFails = 0;
        -:   16:
function checkVillageCard called 200000 returned 100% blocks executed 54%
        -:   17:void checkVillageCard(int p, struct gameState *post){
        -:   18:    struct gameState pre;
        -:   19:    int effect;
   200000:   20:    int bonus = 0;
        -:   21:
        -:   22:    //making a copy of the state
   200000:   23:    memcpy(&pre, post, sizeof(struct gameState));
        -:   24:
        -:   25:    //calling villageCard via cardEffect
   200000:   26:    effect = cardEffect(village, 0, 0, 0, post, 0, &bonus);
        -:   27:
   200000:   28:    if(effect){
branch  0 taken 0%
branch  1 taken 100%
    #####:   29:        villageCallFails++;
    #####:   30:    }
        -:   31:
        -:   32:    //draw card
   200000:   33:    drawCard(p, &pre);
        -:   34:
   200000:   35:    if(pre.deckCount[p] != post->deckCount[p]){
branch  0 taken 0%
branch  1 taken 100%
    #####:   36:        drawCardFails++;
    #####:   37:    }
        -:   38:
        -:   39:    //+2 actions
   200000:   40:    pre.numActions = pre.numActions + 2;
        -:   41:
   200000:   42:    if(pre.numActions != post->numActions){
branch  0 taken 0%
branch  1 taken 100%
    #####:   43:        actionFails++;
    #####:   44:    }
        -:   45:
        -:   46:    //discard card
   200000:   47:    discardCard(0, p, &pre, 0);
        -:   48:
   200000:   49:    if((pre.handCount[p] != post->handCount[p]) && (pre.deckCount[p] != post->deckCount[p])){
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:   50:        discardFails++;
    #####:   51:    }
   200000:   52:}
        -:   53:
function main called 1 returned 100% blocks executed 88%
        -:   54:int main(){
        1:   55:    int seed = 1000;
        1:   56:    int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        -:   57:    struct gameState G;
        -:   58:    int i, player;
        1:   59:    int itr = 200000;
        -:   60:
        1:   61:    printf("***RANDOM TEST***\n");
        1:   62:    printf("TESTING villageCard...\n");
        -:   63:
        1:   64:    srand(time(NULL));
        -:   65:
        1:   66:    SelectStream(2);
        1:   67:    PutSeed(3);
        -:   68:    
   400002:   69:    for(i = 0; i < itr; i++){
branch  0 taken 99%
branch  1 taken 1%
        -:   70:        //initializing gameState
   200000:   71:        initializeGame(2, k, seed, &G);
   200000:   72:        player = floor(Random() * 2);
   200000:   73:        G.deckCount[player] = floor(Random() * MAX_DECK);
   200000:   74:        G.discardCount[player] = 0;
   200000:   75:        G.handCount[player] = floor(Random() * (MAX_HAND - 1));
   200000:   76:        G.numActions = 1;
   200000:   77:        G.whoseTurn = player;
        -:   78:
   200000:   79:        checkVillageCard(player, &G);
   200000:   80:    }
        -:   81:
        1:   82:    int totalFails = villageCallFails + drawCardFails + discardFails + actionFails;
        -:   83:
        1:   84:    if(totalFails == 0){
branch  0 taken 100%
branch  1 taken 0%
        1:   85:        printf("ALL RANDOM TESTS PASSED\n");
        1:   86:        printf("TOTAL ITERATIONS: %d\n", itr);
        1:   87:    }else {
    #####:   88:        printf("****RANDOM TESTS RESULTS****\n");
    #####:   89:        printf("TOTAL ITERATIONS: %d\n", itr);
    #####:   90:        printf("villageCard call tests fails: %d\n", villageCallFails);
    #####:   91:        printf("drawCard tests fails: %d\n", drawCardFails);
    #####:   92:        printf("discardCard test fails: %d\n", discardFails);
    #####:   93:        printf("# of failed actions: %d\n", actionFails);
        -:   94:    }
        -:   95:
        1:   96:    return 0;
        -:   97:}
