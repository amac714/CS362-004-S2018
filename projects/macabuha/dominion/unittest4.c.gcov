        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://unit test for shuffle() function
        -:    2:
        -:    3:#include "dominion.h"
        -:    4:#include "dominion_helpers.h"
        -:    5:#include "rngs.h"
        -:    6:#include <stdio.h>
        -:    7:#include <math.h>
        -:    8:#include <stdlib.h>
        -:    9:#include <string.h>
        -:   10:
        -:   11:int fail = 0;
        -:   12:
function assertTrue called 2 returned 100% blocks executed 80%
        -:   13:void assertTrue(int a, int b){
        2:   14:	if(a == b){
branch  0 taken 100%
branch  1 taken 0%
        2:   15:		printf("Test successfully completed\n");
        2:   16:	} else {
    #####:   17:		printf("Test failed\n");
    #####:   18:		fail++;
        -:   19:	}
        2:   20:}
        -:   21:
function main called 1 returned 100% blocks executed 75%
        -:   22:int main(){
        1:   23:	int seed = 1000;
        1:   24:	int player = 0;
        1:   25:	int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        -:   26:	struct gameState G;
        -:   27:
        1:   28:	printf("TESTING shuffle():\n");
        -:   29:
        1:   30:	memset(&G, 23, sizeof(struct gameState));
        1:   31:	initializeGame(2, k, seed, &G);
        -:   32:
        1:   33:	G.deckCount[player] = 0;
        1:   34:	printf("Testing with deckCount = 0\n");
        1:   35:	assertTrue(shuffle(player, &G), -1);
        -:   36:
        1:   37:	G.deckCount[player] = 20;
        1:   38:	printf("Testing with deckCount = 20\n");
        1:   39:	assertTrue(shuffle(player, &G), 0);
        -:   40:
        1:   41:	printf("Testing result of shuffle()\n");
        1:   42:	int before = G.deck[player][0];
        1:   43:	shuffle(player, &G);
        1:   44:	int after = G.deck[player][0];
        -:   45:
        1:   46:	if(before == after){
branch  0 taken 0%
branch  1 taken 100%
    #####:   47:		printf("Test failed\n");
    #####:   48:		fail++;
    #####:   49:	}else{
        1:   50:		printf("Test successfully completed\n");
        -:   51:	}
        -:   52:
        1:   53:	if(fail){
branch  0 taken 0%
branch  1 taken 100%
    #####:   54:		printf("\n%d tests failed.\n", fail);
    #####:   55:	}else {
        1:   56:		printf("\nALL TESTS SUCCESSFULLY COMPLETED\n");
        -:   57:	}
        -:   58:
        1:   59:	return 0;
        -:   60:}
