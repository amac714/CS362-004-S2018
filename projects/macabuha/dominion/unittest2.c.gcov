        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://unit test for updateCoins()
        -:    2:
        -:    3:#include "dominion.h"
        -:    4:#include "dominion_helpers.h"
        -:    5:#include "rngs.h"
        -:    6:#include <stdio.h>
        -:    7:#include <math.h>
        -:    8:#include <stdlib.h>
        -:    9:#include <string.h>
        -:   10:
        -:   11:int fail = 0;
        -:   12:
        -:   13:void assertTrue(int a, int b) {
       15:   14:	if(a == b){
       15:   15:		printf("TEST SUCCESSFULLY COMPLETED.\n");
       15:   16:	} else {
    #####:   17:		printf("TEST FAILED.\n");
    #####:   18:		fail++;
        -:   19:	}
       15:   20:}
        -:   21:
        -:   22:int main() {
        1:   23:	int seed = 1000;
        1:   24:	int player = 0;
        -:   25:	int bonus, handCount;
        1:   26:	int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        -:   27:	struct gameState G;
        -:   28:
        -:   29:	int coppers[MAX_HAND];
        -:   30:	int silvers[MAX_HAND];
        -:   31:	int golds[MAX_HAND];
        -:   32:
        -:   33:	int i;
     1002:   34:	for(i = 0; i < MAX_HAND; i++){
      500:   35:		coppers[i] = copper;
      500:   36:		silvers[i] = silver;
      500:   37:		golds[i] = gold;
      500:   38:	}
        -:   39:
        1:   40:	printf("TESTING updateCoins():\n");
        -:   41:
        1:   42:	bonus = 1;
       12:   43:	for(handCount = 1; handCount <= 5; handCount++){
        -:   44:	
        5:   45:		printf("Test with %d treasure card(s) and %d bonus.\n", handCount, bonus);
        -:   46:
        5:   47:		memset(&G, 23, sizeof(struct gameState));
        5:   48:		initializeGame(1, k, seed, &G);
        5:   49:		G.handCount[player] = handCount;
        -:   50:
        -:   51:		//set all cards to copper
        5:   52:		memcpy(G.hand[player], coppers, sizeof(int) * handCount);
        5:   53:		updateCoins(player, &G, bonus);
        -:   54:
        5:   55:		printf("G.coins = %d, expected = %d\n", G.coins, handCount * 1 + bonus);
        5:   56:		assertTrue(G.coins, handCount * 1 + bonus); //check if # of coins are correct
        -:   57:
        -:   58:		//set all cards to silver
        5:   59:		memcpy(G.hand[player], silvers, sizeof(int) * handCount);
        5:   60:		updateCoins(player, &G, bonus);
        -:   61:
        5:   62:		printf("G.coins = %d, expected = %d\n", G.coins, handCount * 2 + bonus);
        5:   63:		assertTrue(G.coins, handCount * 2 + bonus); //check if # of coins are correct
        -:   64:
        -:   65:		//set all cards to gold
        5:   66:		memcpy(G.hand[player], golds, sizeof(int) * handCount);
        5:   67:		updateCoins(player, &G, bonus);
        -:   68:
        5:   69:		printf("G.coins = %d, expected = %d\n", G.coins, handCount * 3 + bonus);
        5:   70:		assertTrue(G.coins, handCount * 3 + bonus);
        -:   71:
        5:   72:		bonus++;
        -:   73:
        5:   74:	}
        -:   75:
        1:   76:	if(fail){
    #####:   77:		printf("\n%d tests failed\n", fail);
    #####:   78:	}else {
        1:   79:		printf("\nALL TESTS SUCCESSFULLY COMPLETED\n");
        -:   80:	}
        -:   81:	
        1:   82:	return 0;
        -:   83:}
