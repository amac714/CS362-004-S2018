        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://unit test for drawCard() function
        -:    2:
        -:    3:#include "dominion.h"
        -:    4:#include "dominion_helpers.h"
        -:    5:#include "rngs.h"
        -:    6:#include <stdio.h>
        -:    7:#include <math.h>
        -:    8:#include <stdlib.h>
        -:    9:#include <string.h>
        -:   10:
        -:   11:int fail = 0;
        -:   12:
function assertTrue called 4 returned 100% blocks executed 80%
        -:   13:void assertTrue(int a, int b){
        4:   14:	if(a == b){
branch  0 taken 100%
branch  1 taken 0%
        4:   15:		printf("Test successfully completed\n");
        4:   16:	} else {
    #####:   17:		printf("Test failed\n");
    #####:   18:		fail++;
        -:   19:	}
        4:   20:}
        -:   21:
function main called 1 returned 100% blocks executed 80%
        -:   22:int main() {
        1:   23:	int seed = 1000;
        1:   24:	int player = 0;
        1:   25:	int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        -:   26:	struct gameState G;
        -:   27:
        1:   28:	printf("TESTING drawCard():\n");
        -:   29:
        -:   30:	//initialize game
        1:   31:	memset(&G, 23, sizeof(struct gameState));
        1:   32:	initializeGame(2, k, seed, &G);
        -:   33:
        -:   34:	//empty deck
        1:   35:	G.deckCount[player] = 0;
        1:   36:	G.discardCount[player] = 5;
        -:   37:	//hand count
        1:   38:	G.handCount[player] = 1;
        -:   39:
        1:   40:	int currHand = G.handCount[player];
        1:   41:	drawCard(player, &G);
        -:   42:	
        1:   43:	printf("Current handCount = %d, expected = %d\n", G.handCount[player], currHand + 1);
        1:   44:	assertTrue(G.handCount[player], currHand + 1);
        -:   45:
        1:   46:	printf("Current deckCount = %d, expected = 4\n", G.deckCount[player]);
        1:   47:	assertTrue(G.deckCount[player], 4);
        -:   48:
        -:   49:	//testing drawCard with non-empty deck (4)
        1:   50:	drawCard(player, &G);	
        1:   51:	printf("Current handCount = %d, expected = 3\n", G.handCount[player]);
        1:   52:	assertTrue(G.handCount[player], 3);
        -:   53:
        1:   54:	printf("Current deckCount = %d, expected = 3\n", G.deckCount[player]);
        1:   55:	assertTrue(G.deckCount[player], 3);
        -:   56:
        1:   57:	if(fail){
branch  0 taken 0%
branch  1 taken 100%
    #####:   58:		printf("\n%d tests failed.\n", fail);
    #####:   59:	}else {
        1:   60:		printf("\nALL TESTS SUCCESSFULLY COMPLETED\n");
        -:   61:	}
        -:   62:
        1:   63:	return 0;
        -:   64:}
