        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://unit test for council_room card
        -:    2:
        -:    3:#include "dominion.h"
        -:    4:#include "dominion_helpers.h"
        -:    5:#include "rngs.h"
        -:    6:#include <stdio.h>
        -:    7:#include <math.h>
        -:    8:#include <stdlib.h>
        -:    9:#include <string.h>
        -:   10:
        -:   11:#define TESTCARD "council_room"
        -:   12:
        -:   13:int fail = 0;
        -:   14:
function assertTrue called 3 returned 100% blocks executed 100%
        -:   15:void assertTrue(int a, int b){
        3:   16:	if(a == b){
branch  0 taken 67%
branch  1 taken 33%
        2:   17:		printf("Test successfully completed\n");
        2:   18:	} else {
        1:   19:		printf("Test failed\n");
        1:   20:		fail++;
        -:   21:	}
        3:   22:}
        -:   23:
function main called 1 returned 100% blocks executed 80%
        -:   24:int main() {
        1:   25:	int seed = 1000;
        1:   26:	int player = 0;
        1:   27:	int player1 = 1;
        1:   28:	int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        -:   29:	struct gameState G, testG;
        1:   30:	int numPlayers = 2;
        1:   31:	int handPos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   32:
        -:   33:	//initialize a game state and player cards
        1:   34:	memset(&G, 23, sizeof(struct gameState));
        1:   35:	memset(&testG, 23, sizeof(struct gameState));
        1:   36:	initializeGame(numPlayers, k, seed, &G);
        -:   37:
        1:   38:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   39:
        -:   40:	//copy game state to a test case
        1:   41:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   42:
        1:   43:	cardEffect(council_room, choice1, choice2, choice3, &testG, handPos, &bonus);
        -:   44:
        -:   45:	//there should be +3 cards in player 0's hand
        1:   46:	printf("TEST 1: checking hand count\n");
        1:   47:	assertTrue(testG.handCount[player], G.handCount[player] + 3);
        -:   48:
        -:   49:	//buy should be +1
        1:   50:	printf("TEST 2: checking numBuys\n");
        1:   51:	assertTrue(testG.numBuys, G.numBuys + 1);
        -:   52:
        -:   53:	//player 1's hand should have +1 cards
        1:   54:	printf("TEST 3: checking other player's hand\n");
        1:   55:	assertTrue(testG.handCount[player1], G.handCount[player1] + 1);
        -:   56:
        1:   57:	if(fail){
branch  0 taken 100%
branch  1 taken 0%
        1:   58:		printf("\n%d test(s) failed\n", fail);
        1:   59:	}else {
    #####:   60:		printf("\nALL TESTS SUCCESSFULLY COMPLETED\n");
        -:   61:	}
        -:   62:
        1:   63:	return 0;
        -:   64:}
