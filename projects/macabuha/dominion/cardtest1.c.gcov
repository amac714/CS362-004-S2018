        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://unit test for adventurer card
        -:    2:
        -:    3:#include "dominion.h"
        -:    4:#include "dominion_helpers.h"
        -:    5:#include "rngs.h"
        -:    6:#include <stdio.h>
        -:    7:#include <math.h>
        -:    8:#include <stdlib.h>
        -:    9:#include <string.h>
        -:   10:
        -:   11:#define TESTCARD "adventurer"
        -:   12:
        -:   13:int fail = 0;
        -:   14:
function assertTrue called 2 returned 100% blocks executed 80%
        -:   15:void assertTrue(int a, int b){
        2:   16:	if(a == b){
branch  0 taken 100%
branch  1 taken 0%
        2:   17:		printf("Test successfully completed\n");
        2:   18:	} else {
    #####:   19:		printf("Test failed\n");
    #####:   20:		fail++;
        -:   21:	}
        2:   22:}
        -:   23:
function main called 1 returned 100% blocks executed 95%
        -:   24:int main(){
        1:   25:	int seed = 1000;
        1:   26:	int player = 0;
        1:   27:	int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        -:   28:	struct gameState G, testG;
        1:   29:	int numPlayers = 2;
        1:   30:	int handPos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   31:	int testTreasureCount = 0, treasureCount = 0;
        -:   32:	int card, testCard;
        -:   33:
        -:   34:	//initialize a game state and player cards
        1:   35:	memset(&G, 23, sizeof(struct gameState));
        1:   36:	memset(&testG, 23, sizeof(struct gameState));
        1:   37:	initializeGame(numPlayers, k, seed, &G);
        -:   38:	
        1:   39:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   40:
        -:   41:	//copy game state to a test case
        1:   42:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   43:
        1:   44:	cardEffect(adventurer, choice1, choice2, choice3, &testG, handPos, &bonus);
        -:   45:
        1:   46:	printf("TEST 1: checking treasure cards\n");
        -:   47:	
        -:   48:	int i;
       16:   49:	for(i = 0; i < testG.handCount[player]; i++){
branch  0 taken 88%
branch  1 taken 13%
        7:   50:		testCard = testG.hand[player][i];
        9:   51:		if(testCard == copper || testCard == silver || testCard == gold){
branch  0 taken 14%
branch  1 taken 86%
branch  2 taken 100%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 100%
        6:   52:			testTreasureCount++;
        6:   53:		}
        7:   54:	}
        -:   55:
       12:   56:	for(i = 0; i < G.handCount[player]; i++){
branch  0 taken 83%
branch  1 taken 17%
        5:   57:		card = G.hand[player][i];
        7:   58:		if(card == copper || card == silver || card == gold){
branch  0 taken 20%
branch  1 taken 80%
branch  2 taken 100%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 100%
        4:   59:			treasureCount++;
        4:   60:		}
        5:   61:	}
        -:   62:
        1:   63:	assertTrue(treasureCount+2, testTreasureCount);
        -:   64:
        1:   65:	printf("TEST 2: checking hand count\n");
        1:   66:	assertTrue(testG.handCount[player], G.handCount[player]+2);	
        -:   67:	
        1:   68:	if(fail){
branch  0 taken 0%
branch  1 taken 100%
    #####:   69:		printf("\n%d test(s) failed\n", fail);
    #####:   70:	}else {
        1:   71:		printf("\nALL TESTS SUCCESSFULLY COMPLETED\n");
        -:   72:	}
        -:   73:
        1:   74:	return 0;
        -:   75:}
