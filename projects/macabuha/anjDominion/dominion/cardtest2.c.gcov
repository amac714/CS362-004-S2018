        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://unit test for smithy card
        -:    2:
        -:    3:#include "dominion.h"
        -:    4:#include "dominion_helpers.h"
        -:    5:#include "rngs.h"
        -:    6:#include <stdio.h>
        -:    7:#include <math.h>
        -:    8:#include <stdlib.h>
        -:    9:#include <string.h>
        -:   10:
        -:   11:#define TESTCARD "smithy"
        -:   12:
        -:   13:int fail = 0;
        -:   14:
function assertTrue called 1 returned 100% blocks executed 80%
        -:   15:void assertTrue(int a, int b){
        1:   16:	if(a == b){
branch  0 taken 0%
branch  1 taken 100%
    #####:   17:		printf("Test successfully completed\n");
    #####:   18:	} else {
        1:   19:		printf("Test failed\n");
        1:   20:		fail++;
        -:   21:	}
        1:   22:}
        -:   23:
function main called 1 returned 100% blocks executed 80%
        -:   24:int main(){
        1:   25:	int seed = 1000;
        1:   26:	int player = 0;
        1:   27:	int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        -:   28:	struct gameState G, testG;
        1:   29:	int numPlayers = 2;
        1:   30:	int handPos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   31:
        -:   32:	//initialize a game state and player cards
        1:   33:	memset(&G, 23, sizeof(struct gameState));
        1:   34:	memset(&testG, 23, sizeof(struct gameState));
        1:   35:	initializeGame(numPlayers, k, seed, &G);
        -:   36:
        1:   37:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   38:
        -:   39:	//copy game state to a test case
        1:   40:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   41:
        1:   42:	cardEffect(smithy, choice1, choice2, choice3, &testG, handPos, &bonus);
        -:   43:
        1:   44:	printf("TEST 1: checking hand count\n");
        1:   45:	assertTrue(testG.handCount[player], G.handCount[player] + 2);
        -:   46:
        1:   47:	if(fail){
branch  0 taken 100%
branch  1 taken 0%
        1:   48:		printf("\n%d test(s) failed.\n", fail);
        1:   49:	}else {
    #####:   50:		printf("\nALL TESTS SUCCESSFULLY COMPLETED\n");
        -:   51:	}
        -:   52:
        1:   53:	return 0;
        -:   54:}
